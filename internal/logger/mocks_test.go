// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package logger_test

import (
	"context"
	"github.com/kyuff/es/internal/logger"
	"log/slog"
	"sync"
)

// Ensure, that HandlerMock does implement logger.Handler.
// If this is not the case, regenerate this file with moq.
var _ logger.Handler = &HandlerMock{}

// HandlerMock is a mock implementation of logger.Handler.
//
//	func TestSomethingThatUsesHandler(t *testing.T) {
//
//		// make and configure a mocked logger.Handler
//		mockedHandler := &HandlerMock{
//			EnabledFunc: func(contextMoqParam context.Context, level slog.Level) bool {
//				panic("mock out the Enabled method")
//			},
//			HandleFunc: func(contextMoqParam context.Context, record slog.Record) error {
//				panic("mock out the Handle method")
//			},
//			WithAttrsFunc: func(attrs []slog.Attr) slog.Handler {
//				panic("mock out the WithAttrs method")
//			},
//			WithGroupFunc: func(name string) slog.Handler {
//				panic("mock out the WithGroup method")
//			},
//		}
//
//		// use mockedHandler in code that requires logger.Handler
//		// and then make assertions.
//
//	}
type HandlerMock struct {
	// EnabledFunc mocks the Enabled method.
	EnabledFunc func(contextMoqParam context.Context, level slog.Level) bool

	// HandleFunc mocks the Handle method.
	HandleFunc func(contextMoqParam context.Context, record slog.Record) error

	// WithAttrsFunc mocks the WithAttrs method.
	WithAttrsFunc func(attrs []slog.Attr) slog.Handler

	// WithGroupFunc mocks the WithGroup method.
	WithGroupFunc func(name string) slog.Handler

	// calls tracks calls to the methods.
	calls struct {
		// Enabled holds details about calls to the Enabled method.
		Enabled []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Level is the level argument value.
			Level slog.Level
		}
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Record is the record argument value.
			Record slog.Record
		}
		// WithAttrs holds details about calls to the WithAttrs method.
		WithAttrs []struct {
			// Attrs is the attrs argument value.
			Attrs []slog.Attr
		}
		// WithGroup holds details about calls to the WithGroup method.
		WithGroup []struct {
			// Name is the name argument value.
			Name string
		}
	}
	lockEnabled   sync.RWMutex
	lockHandle    sync.RWMutex
	lockWithAttrs sync.RWMutex
	lockWithGroup sync.RWMutex
}

// Enabled calls EnabledFunc.
func (mock *HandlerMock) Enabled(contextMoqParam context.Context, level slog.Level) bool {
	if mock.EnabledFunc == nil {
		panic("HandlerMock.EnabledFunc: method is nil but Handler.Enabled was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Level           slog.Level
	}{
		ContextMoqParam: contextMoqParam,
		Level:           level,
	}
	mock.lockEnabled.Lock()
	mock.calls.Enabled = append(mock.calls.Enabled, callInfo)
	mock.lockEnabled.Unlock()
	return mock.EnabledFunc(contextMoqParam, level)
}

// EnabledCalls gets all the calls that were made to Enabled.
// Check the length with:
//
//	len(mockedHandler.EnabledCalls())
func (mock *HandlerMock) EnabledCalls() []struct {
	ContextMoqParam context.Context
	Level           slog.Level
} {
	var calls []struct {
		ContextMoqParam context.Context
		Level           slog.Level
	}
	mock.lockEnabled.RLock()
	calls = mock.calls.Enabled
	mock.lockEnabled.RUnlock()
	return calls
}

// Handle calls HandleFunc.
func (mock *HandlerMock) Handle(contextMoqParam context.Context, record slog.Record) error {
	if mock.HandleFunc == nil {
		panic("HandlerMock.HandleFunc: method is nil but Handler.Handle was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Record          slog.Record
	}{
		ContextMoqParam: contextMoqParam,
		Record:          record,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(contextMoqParam, record)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//
//	len(mockedHandler.HandleCalls())
func (mock *HandlerMock) HandleCalls() []struct {
	ContextMoqParam context.Context
	Record          slog.Record
} {
	var calls []struct {
		ContextMoqParam context.Context
		Record          slog.Record
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}

// WithAttrs calls WithAttrsFunc.
func (mock *HandlerMock) WithAttrs(attrs []slog.Attr) slog.Handler {
	if mock.WithAttrsFunc == nil {
		panic("HandlerMock.WithAttrsFunc: method is nil but Handler.WithAttrs was just called")
	}
	callInfo := struct {
		Attrs []slog.Attr
	}{
		Attrs: attrs,
	}
	mock.lockWithAttrs.Lock()
	mock.calls.WithAttrs = append(mock.calls.WithAttrs, callInfo)
	mock.lockWithAttrs.Unlock()
	return mock.WithAttrsFunc(attrs)
}

// WithAttrsCalls gets all the calls that were made to WithAttrs.
// Check the length with:
//
//	len(mockedHandler.WithAttrsCalls())
func (mock *HandlerMock) WithAttrsCalls() []struct {
	Attrs []slog.Attr
} {
	var calls []struct {
		Attrs []slog.Attr
	}
	mock.lockWithAttrs.RLock()
	calls = mock.calls.WithAttrs
	mock.lockWithAttrs.RUnlock()
	return calls
}

// WithGroup calls WithGroupFunc.
func (mock *HandlerMock) WithGroup(name string) slog.Handler {
	if mock.WithGroupFunc == nil {
		panic("HandlerMock.WithGroupFunc: method is nil but Handler.WithGroup was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockWithGroup.Lock()
	mock.calls.WithGroup = append(mock.calls.WithGroup, callInfo)
	mock.lockWithGroup.Unlock()
	return mock.WithGroupFunc(name)
}

// WithGroupCalls gets all the calls that were made to WithGroup.
// Check the length with:
//
//	len(mockedHandler.WithGroupCalls())
func (mock *HandlerMock) WithGroupCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockWithGroup.RLock()
	calls = mock.calls.WithGroup
	mock.lockWithGroup.RUnlock()
	return calls
}
