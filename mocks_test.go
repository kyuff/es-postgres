// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package postgres_test

import (
	"context"
	"github.com/kyuff/es"
	"github.com/kyuff/es-postgres"
	"iter"
	"sync"
)

// Ensure, that WriterMock does implement postgres.Writer.
// If this is not the case, regenerate this file with moq.
var _ postgres.Writer = &WriterMock{}

// WriterMock is a mock implementation of postgres.Writer.
//
//	func TestSomethingThatUsesWriter(t *testing.T) {
//
//		// make and configure a mocked postgres.Writer
//		mockedWriter := &WriterMock{
//			WriteFunc: func(ctx context.Context, streamType string, events iter.Seq2[es.Event, error]) error {
//				panic("mock out the Write method")
//			},
//		}
//
//		// use mockedWriter in code that requires postgres.Writer
//		// and then make assertions.
//
//	}
type WriterMock struct {
	// WriteFunc mocks the Write method.
	WriteFunc func(ctx context.Context, streamType string, events iter.Seq2[es.Event, error]) error

	// calls tracks calls to the methods.
	calls struct {
		// Write holds details about calls to the Write method.
		Write []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StreamType is the streamType argument value.
			StreamType string
			// Events is the events argument value.
			Events iter.Seq2[es.Event, error]
		}
	}
	lockWrite sync.RWMutex
}

// Write calls WriteFunc.
func (mock *WriterMock) Write(ctx context.Context, streamType string, events iter.Seq2[es.Event, error]) error {
	if mock.WriteFunc == nil {
		panic("WriterMock.WriteFunc: method is nil but Writer.Write was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		StreamType string
		Events     iter.Seq2[es.Event, error]
	}{
		Ctx:        ctx,
		StreamType: streamType,
		Events:     events,
	}
	mock.lockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	mock.lockWrite.Unlock()
	return mock.WriteFunc(ctx, streamType, events)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//
//	len(mockedWriter.WriteCalls())
func (mock *WriterMock) WriteCalls() []struct {
	Ctx        context.Context
	StreamType string
	Events     iter.Seq2[es.Event, error]
} {
	var calls []struct {
		Ctx        context.Context
		StreamType string
		Events     iter.Seq2[es.Event, error]
	}
	mock.lockWrite.RLock()
	calls = mock.calls.Write
	mock.lockWrite.RUnlock()
	return calls
}
